import discord
import asyncio
from discord.ui import Select
from discord import app_commands as apc
from DataBase import DbWork
from typing import Literal
from random import choices, randint
from math import sqrt


class NrpGames(apc.Group, name="–Ω—Ä–ø_—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ"):
    def __init__(self, bot: discord.ext.commands.Bot):
        super().__init__()
        self.bot = bot

    @apc.command(name="—Å–Ω—è—Ç–∏–µ_–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
    async def clear_block(self, interaction: discord.Interaction, confirm: Literal["–î–∞, —è —Ç—Ä–∞—á—É 100 –ù—Ä–ø –º–æ–Ω–µ—Ç"]):
        """
        –ü–æ–∫—É–ø–∫–∞ —Å–Ω—è—Ç–∏—è —Ä–æ–ª–∏ "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" –∑–∞ 200 –ù–æ–Ω–†–ü –º–æ–Ω–µ—Ç.
        """
        await interaction.response.defer()
        result_embed = discord.Embed(title="–°–Ω—è—Ç–∏–µ —Ä–æ–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.", colour=self.bot.SETTINGS["MAIN_COLOR"])

        balance = DbWork.select("nrp", "money", f"WHERE userid = {interaction.user.id}")
        role = interaction.guild.get_role(self.bot.SETTINGS['Guilds']['MAIN_GUILD']['Roles']['RpBlock'])

        if role not in interaction.user.roles:
            result_embed.description = "–£ –≤–∞—Å –Ω–µ—Ç —Ä–æ–ª–∏ \"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\" –¥–ª—è —Å–Ω—è—Ç–∏—è."
            await interaction.followup.send(embed = result_embed)
            return
        if balance[0][0] < 200.0:
            result_embed.description = "–£ –≤–∞—Å –Ω–µ—Ç 200 –ù–æ–Ω–†–ü –º–æ–Ω–µ—Ç."
            await interaction.followup.send(embed = result_embed)
            return

        DbWork.update("nrp", f"money = {balance[0][0] - 200}", f"userid = {interaction.user.id}")
        DbWork.delete("blocked", f"userid = {interaction.user.id}")

        await interaction.user.remove_roles(role)
        result_embed.description = "–£—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç–∞ —Ä–æ–ª—å."
        await interaction.followup.send(embed = result_embed)


    @apc.command(name="–ø–æ–¥–∂–µ—á—å_–±–∞–ª–∞–Ω—Å")
    async def fire_balance(self, interaction: discord.Interaction, target: discord.Member, confirm: Literal["–î–∞, —è —Ç—Ä–∞—á—É 200 –ù—Ä–ø –º–æ–Ω–µ—Ç"]):
        """
        –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∂–µ—á—å –ù–æ–Ω–†–ü –º–æ–Ω–µ—Ç—ã –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        :param target: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —á–µ–π –±–∞–ª–∞–Ω—Å –≤—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –ø–æ–¥–∂–µ—á—å.
        """
        await interaction.response.defer()
        result_embed = discord.Embed(title="–ü–æ–ø—ã—Ç–∫–∞ –ü–æ–¥–∂–æ–≥–∞!", colour=self.bot.SETTINGS["MAIN_COLOR"])

        balance = DbWork.select("nrp", "money", f"WHERE userid = {interaction.user.id}")
        target_balance = DbWork.select("nrp", "money", f"WHERE userid = {target.id}")
        new_target_balance = target_balance[0][0]

        if balance[0][0] < 200.0:
            result_embed.description = "–£ –≤–∞—Å –Ω–µ—Ç 200 –ù–æ–Ω–†–ü –º–æ–Ω–µ—Ç."
            await interaction.followup.send(embed = result_embed)
            return

        DbWork.update("nrp", f"money = {balance[0][0] - 200}", f"userid = {interaction.user.id}")

        if randint(1, 2) == 1:
            new_target_balance = new_target_balance * (randint(80, 95) / 100)
            result_embed.description = f"–û —É–∂–∞—Å! –ö–æ—à–µ–ª—ë–∫ {target.display_name} –æ—Ö–≤–∞—Ç–∏–ª –æ–≥–æ–Ω—å! –ï–º—É –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∞—Å—Ç–∏ {round(target_balance[0][0] - new_target_balance, 2)} –º–æ–Ω–µ—Ç..."
            DbWork.update("nrp", f"money = {new_target_balance}", f"userid = {target.id}")
            await interaction.followup.send(target.mention, embed = result_embed)
            return
        if randint(1, 2) == 1:
            new_balance = (balance[0][0] - 100) * (randint(80, 95) / 100)
            result_embed.description = f"–ö–∞–∫ –∂–µ –≤–∞–º –Ω–µ –ø–æ–≤–µ–∑–ª–æ... –û–≥–æ–Ω—å –æ—Ö–≤–∞—Ç–∏–ª –≤–∞—Å, –∏ –≤ –ø–æ–∂–∞—Ä–µ —Å–≥–æ—Ä–µ–ª–æ {round(balance[0][0] - new_balance, 2)} –º–æ–Ω–µ—Ç..."
            DbWork.update("nrp", f"money = {new_balance}", f"userid = {interaction.user.id}")
            await interaction.followup.send(embed=result_embed)
            return
        result_embed.description = f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞–º –Ω–µ –ø–æ–≤–µ–∑–ª–æ - –æ–≥–æ–Ω—å –ø—Ä–æ—Å—Ç–æ –Ω–µ —É—Å–ø–µ–ª —Ä–∞–∑–≥–æ—Ä–µ—Ç—å—Å—è, –∫–∞–∫ —Ç–æ—Ç –ø–æ—Ç—É—à–∏–ª–∏. –ú–æ–∂–µ—Ç –±—ã—Ç—å, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!"
        await interaction.followup.send(embed=result_embed)


    @apc.command(name="—Å–ª–æ—Ç—ã")
    async def slot_game(self, interaction: discord.Interaction, game: Literal[3, 5], amount: float):
        """
        –ö—Ä—É—Ç–∫–∞ —Å–ª–æ—Ç–æ–≤.

        :param game: –†–µ–∂–∏–º –∏–≥—Ä—ã.
        :param amount: –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞. –û—Ç 25, –¥–æ 50.
        """
        result_embed = discord.Embed(
            description=f" ### –ö—Ä—É—Ç—è—Ç—Å—è —Å–ª–æ—Ç—ã –¥–ª—è {interaction.user.mention}! –°—Ç–∞–≤–∫–∞: {amount}\n",
            colour=self.bot.SETTINGS["MAIN_COLOR"])

        balance = DbWork.select("nrp", "money", f"WHERE userid = {interaction.user.id}")
        balance = [[0.0]] if not balance else balance
        if amount <= 0.0:
            await interaction.response.send_message(f"–°—Ç–∞–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–∞ –Ω—É–ª—é!", ephemeral=True)
            return
        if amount > 50.0 or amount < 25.0:
            await interaction.response.send_message(f"–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 25 –¥–æ 50 –Ω—Ä–ø –º–æ–Ω–µ—Ç!",
                                                    ephemeral=True)
            return
        if balance[0][0] < amount:
            await interaction.response.send_message(f"–£ –≤–∞—Å –Ω–µ—Ç {amount} –º–æ–Ω–µ—Ç!", ephemeral=True)
            return

        await interaction.response.send_message("–ó–∞–ø—É—Å–∫ —Ä—É–ª–µ—Ç–æ—á–∫–∏!", ephemeral=True)
        message = await interaction.channel.send(embed=result_embed)

        elements = ("üî¥", "üü†", "üü°", "üü¢", "üîµ", "üñ§", "ü§ç")
        chances = (300, 300, 300, 300, 300, 1, 1)
        seq = choices(elements, chances, k=game ** 2)
        await asyncio.sleep(0.5)

        if game == 3:
            series_reward = 4
        else:
            series_reward = 1.5

        i = 1
        last_element = ""
        series = [0]
        result_embed.description += "\n# "
        for element in seq:
            if last_element == element:
                series.append((series[-1] + series_reward) * 1.35)
            elif element == "üñ§":
                series.append(-50)
            elif element == "ü§ç":
                series.append(25)
            else:
                series.append(0)

            result_embed.description += element
            last_element = element
            if i % game == 0:
                await message.edit(embed=result_embed)
                await asyncio.sleep(0.5)
                result_embed.description += "\n# "
                last_element = ""
            i += 1

        gain = sum(series) * sqrt(amount) - sqrt(amount) * (game + sqrt(amount))
        if game == 3:
            gain + abs(gain) / 2
        else:
            gain - abs(gain) / 2
        gain = round(gain, 2)

        balance = DbWork.select("nrp", "money", f"WHERE userid = {interaction.user.id}")
        DbWork.update("nrp", f"money = {balance[0][0] + gain}", f"userid = {interaction.user.id}")
        bot_balance = DbWork.select("nrp", "money", f"WHERE userid = {self.bot.user.id}")
        DbWork.update("nrp", f"money = {bot_balance[0][0] - gain}", f"userid = {self.bot.user.id}")

        result_embed.description += f"–í—ã–∏–≥—Ä—ã—à: {gain}\n-# –ë–∞–ª–∞–Ω—Å –ò–∫—Å–ö–æ—Ä–∞: {round(bot_balance[0][0] - gain, 2)}"

        await message.edit(embed=result_embed)


async def setup(bot):
    bot.tree.add_command(NrpGames(bot), guild=bot.main_guild)
    print('Group loaded')